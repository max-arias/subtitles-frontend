{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/srv/app/pages/[searchTerm].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Search from '../components/Search';\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var suggestionData = _ref.suggestionData;\n  var router = useRouter();\n  var loading = router.isFallback;\n  return __jsx(\"div\", {\n    className: \"w-full max-w-screen-xl mx-auto px-6 font-sans\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(Search, {\n    suggestionData: suggestionData,\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Index, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/srv/app/pages/[searchTerm].js"],"names":["React","useRouter","Search","Index","suggestionData","router","loading","isFallback"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAwB;AAAA;;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AACpC,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,MAAMK,OAAO,GAAGD,MAAM,CAACE,UAAvB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,cAAc,EAAEH,cAAxB;AAAwC,IAAA,OAAO,EAAEE,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CATD;;GAAMH,K;UACWF,S;;;KADXE,K;;AAwCN,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\n\nimport Search from '../components/Search'\n\nconst Index = ({ suggestionData }) => {\n  const router = useRouter();\n  const loading = router.isFallback;\n\n  return (\n    <div className=\"w-full max-w-screen-xl mx-auto px-6 font-sans\">\n      <Search suggestionData={suggestionData} loading={loading} />\n    </div>\n  )\n}\n\nexport async function getStaticPaths() {\n  const API_URL = process.env.API_URL || '/'\n\n  const data = await fetch(`${API_URL}/suggestions`);\n  const suggestions = await data.json()\n\n  // Get the paths we want to pre-render based on suggestions\n  const paths = suggestions.map((suggestion) => ({\n    params: { searchTerm: suggestion.keyword },\n  }));\n\n  return { paths, fallback: true }\n}\n\nexport async function getStaticProps(ctx) {\n  const { searchTerm } = ctx.params;\n  let suggestionData = null;\n\n  if (searchTerm) {\n    const API_URL = process.env.API_URL || '/'\n\n    const data = await fetch(`${API_URL}/suggestions?keyword=${searchTerm}`)\n    suggestionData = await data.json()\n    suggestionData = suggestionData && suggestionData[0] && suggestionData[0].data ? suggestionData[0].data : null\n  }\n\n  return { props: { suggestionData }, revalidate: 1 }\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}