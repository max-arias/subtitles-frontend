{"ast":null,"code":"var _jsxFileName = \"/srv/app/pages/[searchTerm].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Search from '../components/Search';\n\nconst Index = ({\n  suggestionData\n}) => {\n  const router = useRouter();\n  const loading = router.isFallback;\n  return __jsx(\"div\", {\n    className: \"w-full max-w-screen-xl mx-auto px-6 font-sans\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(Search, {\n    suggestionData: suggestionData,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport async function getStaticPaths() {\n  const API_URL = process.env.API_URL || '/';\n  const data = await fetch(`${API_URL}/suggestions`);\n  const suggestions = await data.json(); // Get the paths we want to pre-render based on suggestions\n\n  const paths = suggestions.map(suggestion => ({\n    params: {\n      searchTerm: suggestion.keyword\n    }\n  }));\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps(ctx) {\n  const {\n    searchTerm\n  } = ctx.params;\n  let suggestionData = null;\n\n  if (searchTerm) {\n    const API_URL = process.env.API_URL || '/';\n    const data = await fetch(`${API_URL}/suggestions?keyword=${searchTerm}`);\n    suggestionData = await data.json();\n    suggestionData = suggestionData && suggestionData[0] && suggestionData[0].data ? suggestionData[0].data : null;\n  }\n\n  return {\n    props: {\n      suggestionData\n    },\n    revalidate: 1\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/srv/app/pages/[searchTerm].js"],"names":["React","useRouter","Search","Index","suggestionData","router","loading","isFallback","getStaticPaths","API_URL","process","env","data","fetch","suggestions","json","paths","map","suggestion","params","searchTerm","keyword","fallback","getStaticProps","ctx","props","revalidate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AACpC,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAMK,OAAO,GAAGD,MAAM,CAACE,UAAvB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,cAAc,EAAEH,cAAxB;AAAwC,IAAA,OAAO,EAAEE,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CATD;;AAWA,OAAO,eAAeE,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAAZ,IAAuB,GAAvC;AAEA,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,cAAZ,CAAxB;AACA,QAAMK,WAAW,GAAG,MAAMF,IAAI,CAACG,IAAL,EAA1B,CAJqC,CAMrC;;AACA,QAAMC,KAAK,GAAGF,WAAW,CAACG,GAAZ,CAAiBC,UAAD,KAAiB;AAC7CC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,UAAU,EAAEF,UAAU,CAACG;AAAzB;AADqC,GAAjB,CAAhB,CAAd;AAIA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8BC,GAA9B,EAAmC;AACxC,QAAM;AAAEJ,IAAAA;AAAF,MAAiBI,GAAG,CAACL,MAA3B;AACA,MAAIf,cAAc,GAAG,IAArB;;AAEA,MAAIgB,UAAJ,EAAgB;AACd,UAAMX,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAAZ,IAAuB,GAAvC;AAEA,UAAMG,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,wBAAuBW,UAAW,EAA9C,CAAxB;AACAhB,IAAAA,cAAc,GAAG,MAAMQ,IAAI,CAACG,IAAL,EAAvB;AACAX,IAAAA,cAAc,GAAGA,cAAc,IAAIA,cAAc,CAAC,CAAD,CAAhC,IAAuCA,cAAc,CAAC,CAAD,CAAd,CAAkBQ,IAAzD,GAAgER,cAAc,CAAC,CAAD,CAAd,CAAkBQ,IAAlF,GAAyF,IAA1G;AACD;;AAED,SAAO;AAAEa,IAAAA,KAAK,EAAE;AAAErB,MAAAA;AAAF,KAAT;AAA6BsB,IAAAA,UAAU,EAAE;AAAzC,GAAP;AACD;AAED,eAAevB,KAAf","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\n\nimport Search from '../components/Search'\n\nconst Index = ({ suggestionData }) => {\n  const router = useRouter();\n  const loading = router.isFallback;\n\n  return (\n    <div className=\"w-full max-w-screen-xl mx-auto px-6 font-sans\">\n      <Search suggestionData={suggestionData} loading={loading} />\n    </div>\n  )\n}\n\nexport async function getStaticPaths() {\n  const API_URL = process.env.API_URL || '/'\n\n  const data = await fetch(`${API_URL}/suggestions`);\n  const suggestions = await data.json()\n\n  // Get the paths we want to pre-render based on suggestions\n  const paths = suggestions.map((suggestion) => ({\n    params: { searchTerm: suggestion.keyword },\n  }));\n\n  return { paths, fallback: true }\n}\n\nexport async function getStaticProps(ctx) {\n  const { searchTerm } = ctx.params;\n  let suggestionData = null;\n\n  if (searchTerm) {\n    const API_URL = process.env.API_URL || '/'\n\n    const data = await fetch(`${API_URL}/suggestions?keyword=${searchTerm}`)\n    suggestionData = await data.json()\n    suggestionData = suggestionData && suggestionData[0] && suggestionData[0].data ? suggestionData[0].data : null\n  }\n\n  return { props: { suggestionData }, revalidate: 1 }\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}